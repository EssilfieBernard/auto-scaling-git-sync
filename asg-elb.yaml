AWSTemplateFormatVersion: '2010-09-09'
Description: Auto-scaling Apache Web Server with CPU-based scaling

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
  InstanceType:
    Type: String
    Default: t2.micro

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LabVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LabInternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
    DependsOn: VPCGatewayAttachment

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  SecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SecurityGroup

  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupALB
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2-SecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroupALB
      Scheme: internet-facing

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      TargetType: instance
      Matcher:
        HttpCode: "200"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-05b10e08d247fb927
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref SecurityGroupWeb
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd stress-ng
            systemctl start httpd
            systemctl enable httpd

            # Enable CGI module
            sed -i 's/#LoadModule cgid_module/LoadModule cgid_module/' /etc/httpd/conf.modules.d/00-base.conf

            # Configure Apache for CGI more completely
            cat << EOF > /etc/httpd/conf.d/cgi.conf
            ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI
                Require all granted
                AddHandler cgi-script .sh
            </Directory>
            EOF

            # Create necessary directories
            mkdir -p /var/www/cgi-bin

            # Create improved stress script
            cat << 'EOF' > /var/www/cgi-bin/stress_cpu.sh
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            echo "<html><head><title>CPU Stress Test</title></head><body>"
            echo "<h1>CPU Stress Started</h1>"
            echo "<p>Running stress-ng with 1 CPU worker for 60 seconds</p>"
            echo "<p>Current server time: $(date)</p>"
            echo "<p>CPU info before stress:</p>"
            echo "<pre>"
            top -bn1 | head -20
            echo "</pre>"

            # Run stress in background but capture PID
            stress-ng --cpu 1 --timeout 60 &
            STRESS_PID=$!

            echo "<p>Stress process started with PID: $STRESS_PID</p>"
            echo "<p><a href='/'>Return to homepage</a></p>"
            echo "</body></html>"
            EOF
            chmod 755 /var/www/cgi-bin/stress_cpu.sh

            # Create server status script
            cat << 'EOF' > /var/www/cgi-bin/status.sh
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            echo "<html><head><title>Server Status</title><meta http-equiv='refresh' content='5'></head><body>"
            echo "<h1>Server Status</h1>"
            echo "<p>Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id || echo 'Unknown')</p>"
            echo "<p>IP Address: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 || echo 'Unknown')</p>"
            echo "<p>Current server time: $(date)</p>"
            echo "<h2>CPU Usage</h2>"
            echo "<pre>"
            top -bn1 | head -20
            echo "</pre>"
            echo "<h2>Memory Usage</h2>"
            echo "<pre>"
            free -m
            echo "</pre>"
            echo "<p><a href='/'>Return to homepage</a></p>"
            echo "</body></html>"
            EOF
            chmod 755 /var/www/cgi-bin/status.sh

            # Get instance metadata with retries and timeout
            retry_count=0
            max_retries=5
            
            while [ $retry_count -lt $max_retries ]; do
              INSTANCE_ID=$(curl -s --connect-timeout 5 http://169.254.169.254/latest/meta-data/instance-id)
              IP_ADDRESS=$(curl -s --connect-timeout 5 http://169.254.169.254/latest/meta-data/local-ipv4)
              
              if [ -n "$INSTANCE_ID" ] && [ -n "$IP_ADDRESS" ]; then
                break
              fi
              
              echo "Metadata retrieval attempt $((retry_count+1)) failed, retrying in 5 seconds..."
              sleep 5
              retry_count=$((retry_count+1))
            done
            
            # Use default values if retrieval fails after all retries
            INSTANCE_ID=${INSTANCE_ID:-"Unknown-ID"}
            IP_ADDRESS=${IP_ADDRESS:-"Unknown-IP"}

            # Create improved index.html
            cat << EOF > /var/www/html/index.html
            <html>
            <head>
              <title>AWS Auto Scaling Demo</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .info { background-color: #f0f0f0; padding: 20px; border-radius: 5px; }
                button { background-color: #ff9900; border: none; color: white; padding: 10px 20px; 
                         font-size: 16px; cursor: pointer; margin-right: 10px; }
              </style>
            </head>
            <body>
              <h1>Auto Scaling Demo Server</h1>
              <div class="info">
                <h2>Server Information</h2>
                <p>Instance ID: $INSTANCE_ID</p>
                <p>IP Address: $IP_ADDRESS</p>
              </div>
              <h2>Actions</h2>
              <form action="/cgi-bin/stress_cpu.sh" method="get">
                <button type="submit">Stress CPU for 60 seconds</button>
              </form>
              <a href="/cgi-bin/status.sh"><button type="button">View Server Status</button></a>
            </body>
            </html>
            EOF
          
            # Set appropriate permissions for web directory
            chown -R apache:apache /var/www
            
            # Restart Apache to apply all changes
            systemctl restart httpd

  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: Apache-Instance
          PropagateAtLaunch: true
          
  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0

Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName