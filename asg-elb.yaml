AWSTemplateFormatVersion: '2010-09-09'
Description: Auto-scaling Apache Web Server with CPU-based scaling

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnetCidr:
    Type: String
    Default: 10.0.3.0/24
  InstanceType:
    Type: String
    Default: t2.micro

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LabVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LabInternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
    DependsOn: VPCGatewayAttachment

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  SecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SecurityGroup

  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupALB
      Tags:
        - Key: Name
          Value: EC2-SecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref SecurityGroupALB
      Scheme: internet-facing

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      TargetType: instance

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0c55b159cbfafe1f0
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref SecurityGroupWeb
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd stress-ng
            systemctl start httpd
            systemctl enable httpd

            # Configure Apache for CGI
            echo "<Directory /var/www/cgi-bin>" >> /etc/httpd/conf/httpd.conf
            echo "  Options +ExecCGI" >> /etc/httpd/conf/httpd.conf
            echo "  AddHandler cgi-script .sh" >> /etc/httpd/conf/httpd.conf
            echo "</Directory>" >> /etc/httpd/conf/httpd.conf

            mkdir -p /var/www/cgi-bin

            # Create stress script
            echo '#!/bin/bash' > /var/www/cgi-bin/stress_cpu.sh
            echo 'echo "Content-type: text/html"' >> /var/www/cgi-bin/stress_cpu.sh
            echo 'echo ""' >> /var/www/cgi-bin/stress_cpu.sh
            echo 'stress-ng --cpu 1 --timeout 60 &' >> /var/www/cgi-bin/stress_cpu.sh
            echo 'echo "CPU stress started"' >> /var/www/cgi-bin/stress_cpu.sh
            chmod +x /var/www/cgi-bin/stress_cpu.sh

            # Create index.html
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            IP_ADDRESS=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            cat << EOF > /var/www/html/index.html
            <html>
            <body>
            <h1>Hello from ${IP_ADDRESS} / ${INSTANCE_ID}</h1>
            <form action="/cgi-bin/stress_cpu.sh" method="post">
              <button type="submit">Stress CPU</button>
            </form>
            </body>
            </html>
            EOF

            systemctl restart httpd

  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: Apache-Instance
          PropagateAtLaunch: true

  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0

Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName